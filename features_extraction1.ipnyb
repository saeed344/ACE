{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8809486,"sourceType":"datasetVersion","datasetId":5298654}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"!pip install biopython","metadata":{"execution":{"iopub.status.busy":"2024-06-28T21:03:56.095375Z","iopub.execute_input":"2024-06-28T21:03:56.095709Z","iopub.status.idle":"2024-06-28T21:04:14.332883Z","shell.execute_reply.started":"2024-06-28T21:03:56.095680Z","shell.execute_reply":"2024-06-28T21:04:14.331710Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting biopython\n  Downloading biopython-1.84-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from biopython) (1.26.4)\nDownloading biopython-1.84-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.2/3.2 MB\u001b[0m \u001b[31m35.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: biopython\nSuccessfully installed biopython-1.84\n","output_type":"stream"}]},{"cell_type":"code","source":"from Bio import SeqIO\nimport numpy as np\nimport pandas as pd\n\nclass FeatureExtractor:\n    def __init__(self, fasta_file):\n        self.fasta_file = fasta_file\n        self.fasta_list = self.read_fasta()\n\n    def read_fasta(self):\n        fasta_list = []\n        for record in SeqIO.parse(self.fasta_file, \"fasta\"):\n            fasta_list.append((record.id, str(record.seq), None))  # Assuming no labels in the FASTA\n        return fasta_list\n\n    def _OPF_10bit(self):\n        try:\n            if not self.is_equal:\n                self.error_msg = 'OPF descriptor needs peptide sequences with equal length.'\n                return False\n            physicochemical_properties_list = [\n                'FYWH',\n                'DE',\n                'KHR',\n                'NQSDECTKRHYW',\n                'AGCTIVLKHFYWM',\n                'IVL',\n                'ASGC',\n                'KHRDE',\n                'PNDTCAGSV',\n                'P',\n            ]\n            physicochemical_properties_index = ['Aromatic', 'Negative', 'Positive', 'Polar', 'Hydrophobic', 'Aliphatic',\n                                                'Tiny', 'Charged', 'Small', 'Proline']\n            header = ['SampleName']\n            encodings = []\n            header += ['OPF_p%s_%s' % (i + 1, j) for i in range(len(self.fasta_list[0][1])) for j in\n                       physicochemical_properties_index]\n            encodings.append(header)\n            for i in self.fasta_list:\n                name, sequence, label = i[0], i[1], i[2]\n                code = [name]\n                for aa in i[1]:\n                    for j in physicochemical_properties_list:\n                        if aa in j:\n                            code.append(1)\n                        else:\n                            code.append(0)\n                encodings.append(code)\n            encodings = np.array(encodings)\n            self.encodings_opf_10bit = pd.DataFrame(encodings[1:, 1:].astype(float), columns=encodings[0, 1:],\n                                                    index=encodings[1:, 0])\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\n    def _OPF_7bit_type_1(self):\n        try:\n            if not self.is_equal:\n                self.error_msg = 'OPF descriptor needs peptide sequences with equal length.'\n                return False\n            physicochemical_properties_list = [\n                'ACFGHILMNPQSTVWY',\n                'CFILMVW',\n                'ACDGPST',\n                'CFILMVWY',\n                'ADGST',\n                'DGNPS',\n                'ACFGILVW',\n            ]\n            physicochemical_properties_index = ['Charge', 'Hydrophobicity', 'Normalized vander Waals volume', 'Polarity',\n                                                'Polariizability', 'Secondary Structure', 'Solvent Accessibility']\n            header = ['SampleName']\n            encodings = []\n            header += ['OPF7_t1_p%s_%s' % (i + 1, j) for i in range(len(self.fasta_list[0][1])) for j in\n                       physicochemical_properties_index]\n            encodings.append(header)\n            for i in self.fasta_list:\n                name, sequence, label = i[0], i[1], i[2]\n                code = [name]\n                for aa in i[1]:\n                    for j in physicochemical_properties_list:\n                        if aa in j:\n                            code.append(1)\n                        else:\n                            code.append(0)\n                encodings.append(code)\n            encodings = np.array(encodings)\n            self.encodings_opf_7bit_type_1 = pd.DataFrame(encodings[1:, 1:].astype(float), columns=encodings[0, 1:],\n                                                          index=encodings[1:, 0])\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\n    def _OPF_7bit_type_2(self):\n        try:\n            if not self.is_equal:\n                self.error_msg = 'OPF descriptor needs peptide sequences with equal length.'\n                return False\n            physicochemical_properties_list = [\n                'DE',\n                'AGHPSTY',\n                'EILNQV',\n                'AGPST',\n                'CEILNPQV',\n                'AEHKLMQR',\n                'HMPSTY',\n            ]\n            physicochemical_properties_index = ['Charge', 'Hydrophobicity', 'Normalized vander Waals volume', 'Polarity',\n                                                'Polariizability', 'Secondary Structure', 'Solvent Accessibility']\n            header = ['SampleName']\n            encodings = []\n            header += ['OPF7_t2_p%s_%s' % (i + 1, j) for i in range(len(self.fasta_list[0][1])) for j in\n                       physicochemical_properties_index]\n            encodings.append(header)\n            for i in self.fasta_list:\n                name, sequence, label = i[0], i[1], i[2]\n                code = [name]\n                for aa in i[1]:\n                    for j in physicochemical_properties_list:\n                        if aa in j:\n                            code.append(1)\n                        else:\n                            code.append(0)\n                encodings.append(code)\n            encodings = np.array(encodings)\n            self.encodings_opf_7bit_type_2 = pd.DataFrame(encodings[1:, 1:].astype(float), columns=encodings[0, 1:],\n                                                          index=encodings[1:, 0])\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\n    def _OPF_7bit_type_3(self):\n        try:\n            if not self.is_equal:\n                self.error_msg = 'OPF descriptor needs peptide sequences with equal length.'\n                return False\n            physicochemical_properties_list = [\n                'KR',\n                'DEKNQR',\n                'FHKMRWY',\n                'DEHKNQR',\n                'FHKMRWY',\n                'CFITVWY',\n                'DEKNRQ',\n            ]\n            physicochemical_properties_index = ['Charge', 'Hydrophobicity', 'Normalized vander Waals volume', 'Polarity',\n                                                'Polariizability', 'Secondary Structure', 'Solvent Accessibility']\n            header = ['SampleName']\n            encodings = []\n            header += ['OPF7_t3_p%s_%s' % (i + 1, j) for i in range(len(self.fasta_list[0][1])) for j in\n                       physicochemical_properties_index]\n            encodings.append(header)\n            for i in self.fasta_list:\n                name, sequence, label = i[0], i[1], i[2]\n                code = [name]\n                for aa in i[1]:\n                    for j in physicochemical_properties_list:\n                        if aa in j:\n                            code.append(1)\n                        else:\n                            code.append(0)\n                encodings.append(code)\n            encodings = np.array(encodings)\n            self.encodings_opf_7bit_type_3 = pd.DataFrame(encodings[1:, 1:].astype(float), columns=encodings[0, 1:],\n                                                          index=encodings[1:, 0])\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\n    def _ASDC(self):\n        try:\n            AA = 'ACDEFGHIKLMNPQRSTVWY'\n            encodings = []\n            aaPairs = []\n            for aa1 in AA:\n                for aa2 in AA:\n                    aaPairs.append(aa1 + aa2)\n            header = ['SampleName']\n            header += ['ASDC_' + aa1 + aa2 for aa1 in AA for aa2 in AA]\n            encodings.append(header)\n            for i in self.fasta_list:\n                name, sequence, label = i[0], i[1], i[2]\n                code = [name]\n                sum = 0\n                pair_dict = {}\n                for pair in aaPairs:\n                    pair_dict[pair] = 0\n                for j in range(len(sequence)):\n                    for k in range(j + 1, len(sequence)):\n                        if sequence[j] in AA and sequence[k] in AA:\n                            pair_dict[sequence[j] + sequence[k]] += 1\n                            sum += 1\n                for pair in aaPairs:\n                    code.append(pair_dict[pair] / sum)\n                encodings.append(code)\n            encodings = np.array(encodings)\n            self.encodings_asdc = pd.DataFrame(encodings[1:, 1:].astype(float), columns=encodings[0, 1:],\n                                               index=encodings[1:, 0])\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\n    def save_features_to_csv(self):\n        try:\n            if hasattr(self, 'encodings_opf_10bit'):\n                self.encodings_opf_10bit.to_csv('opf_10bit_features.csv')\n            if hasattr(self, 'encodings_opf_7bit_type_1'):\n                self.encodings_opf_7bit_type_1.to_csv('opf_7bit_type_1_features.csv')\n            if hasattr(self, 'encodings_opf_7bit_type_2'):\n                self.encodings_opf_7bit_type_2.to_csv('opf_7bit_type_2_features.csv')\n            if hasattr(self, 'encodings_opf_7bit_type_3'):\n                self.encodings_opf_7bit_type_3.to_csv('opf_7bit_type_3_features.csv')\n            if hasattr(self, 'encodings_asdc'):\n                self.encodings_asdc.to_csv('asdc_features.csv')\n            return True\n        except Exception as e:\n            self.error_msg = str(e)\n            return False\n\nif __name__ == '__main__':\n    # Example usage:\n    fasta_file = '/kaggle/input/ace-dataset/ACE_dataset.fasta'\n    extractor = FeatureExtractor(fasta_file)\n    extractor._OPF_10bit()\n    extractor._OPF_7bit_type_1()\n    extractor._OPF_7bit_type_2()\n    extractor._OPF_7bit_type_3()\n    extractor._ASDC()\n    extractor.save_features_to_csv()\n","metadata":{},"execution_count":null,"outputs":[]}]}